name: Deploy to Dev

# 워크플로우 트리거 설정
on:
  workflow_dispatch: # 수동으로 워크플로우 실행
  push:
    branches:
      - JangHyun0247-patch-1 # 특정 브랜치로 푸시될 때 워크플로우 실행
  pull_request:
    branches:
      - dev # dev 브랜치로 PR이 닫힐 때 워크플로우 실행
    types:
      - closed

jobs:
  deploy:
    runs-on: ubuntu-latest # 워크플로우가 실행될 환경 설정 (최신 Ubuntu 버전)

    steps:
      # 리포지토리를 체크아웃하여 코드베이스를 가져옴
      - name: Checkout
        uses: actions/checkout@v3
        # 코드베이스를 GitHub Actions runner에 체크아웃하여 빌드와 테스트가 가능하도록 함

      # JDK 17을 설정하여 자바 환경을 구성
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17' # 사용할 자바 버전 설정
          distribution: 'adopt' # 자바 배포판 설정 (AdoptOpenJDK)

      # Gradle 실행 파일에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew # gradlew 파일에 실행 권한을 부여하여 실행 가능하도록 함

      # 유닛 테스트를 실행하여 코드의 품질을 확인
      - name: Run unit tests
        run: ./gradlew clean test # Gradle을 사용하여 클린 빌드 후 테스트를 실행

      # 테스트가 통과된 경우 Jar 파일을 빌드
      - name: Build Jar
        run: ./gradlew bootJar # 애플리케이션을 패키징하여 실행 가능한 Jar 파일 생성

      # 빌드가 완료된 후 JAR 파일이 존재하는지 확인
      - name: Verify Jar File
        run: test -f build/libs/itsmine-0.0.1-SNAPSHOT.jar && echo "JAR file exists" || echo "JAR file does not exist"
        # 빌드된 JAR 파일이 존재하는지 확인하고 결과를 출력

      # Docker 이미지를 빌드하여 애플리케이션 컨테이너 이미지 생성
      - name: Build Docker image
        run: docker build -t itsmine . # Docker 이미지를 빌드하고 태그를 'itsmine'으로 설정

      # Amazon ECR에 로그인하여 Docker 이미지를 푸시할 수 있도록 설정
      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS 액세스 키 ID
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS 시크릿 액세스 키
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          # AWS ECR에 Docker 로그인

      # ECR 리포지토리가 존재하지 않을 경우 생성
      - name: Create ECR Repository if not exists
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS 액세스 키 ID
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS 시크릿 액세스 키
        run: |
          aws ecr describe-repositories --repository-names itsmine-repository --region ${{ secrets.AWS_REGION }} || \
          aws ecr create-repository --repository-name itsmine-repository --region ${{ secrets.AWS_REGION }}
          # 리포지토리가 존재하지 않으면 새 ECR 리포지토리를 생성

      # 빌드된 Docker 이미지에 고유 태그를 설정하여 ECR에 푸시할 수 있도록 준비
      - name: Tag Docker image
        run: docker tag itsmine:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-repository:${{ github.sha }}
        # Docker 이미지에 현재 커밋 SHA를 태그로 설정하여 고유하게 만듦

      # Docker 이미지를 Amazon ECR에 푸시
      - name: Push Docker image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-repository:${{ github.sha }}
        # 태그된 Docker 이미지를 ECR에 푸시

      # EC2 인스턴스에 SSH로 접속하여 Docker 컨테이너를 배포
      - name: SSH into EC2 and deploy Docker container
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }} # EC2 인스턴스의 호스트 주소
          username: ec2-user # SSH 사용자 이름
          key: ${{ secrets.SSH_KEY }} # SSH 키
          port: 22 # SSH 포트
          script_stop: true # 스크립트 실패 시 작업 중지
          script: |
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-repository:${{ github.sha }}
            docker stop itsmine || true
            docker rm itsmine || true
            docker run -d --name itsmine -p 8080:8080 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-repository:${{ github.sha }}
            # EC2 인스턴스에 SSH로 접속하여 Docker 이미지를 풀하고, 기존 컨테이너를 중지 및 제거한 후 새로운 컨테이너를 실행