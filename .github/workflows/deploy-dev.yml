name: Deploy Application

# 워크플로우 트리거 설정
on:
  workflow_dispatch:  # 수동 트리거
  push:  # 푸시 이벤트 트리거
    branches:
      - feature/backcicd
  pull_request:  # PR 닫힘 이벤트 트리거
    branches:
      - feature/backcicd
    types:
      - closed

jobs:
  deploy:
    runs-on: ubuntu-latest  # 최신 우분투 이미지를 사용하여 작업 실행

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # 리포지토리 체크아웃

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew  # gradlew 실행 권한 부여

      # 유닛 테스트를 실행합니다.
      - name: Run unit tests
        run: ./gradlew test  # 유닛 테스트 실행

      # 빌드를 실행합니다.
      - name: Build with Gradle
        run: ./gradlew build  # 빌드 실행

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # Docker Buildx 설정

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS 액세스 키 ID 설정
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS 비밀 액세스 키 설정
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com  # Amazon ECR 로그인

      - name: Build and push backend Docker image
        id: backend  # ID 설정
        run: |
          docker build -t itsmine-backend .  # 백엔드 Docker 이미지 빌드
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BACKEND_IMAGE_TAG=${{ github.sha }}-$TIMESTAMP  # 이미지 태그 생성
          docker tag itsmine-backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-repository:$BACKEND_IMAGE_TAG  # 태그 설정
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-repository:$BACKEND_IMAGE_TAG  # 이미지 푸시
          echo "BACKEND_IMAGE_TAG=${BACKEND_IMAGE_TAG}"  # 백엔드 이미지 태그 출력
          echo "::set-output name=BACKEND_IMAGE_TAG::$BACKEND_IMAGE_TAG"  # 백엔드 이미지 태그 출력

      - name: Build and push frontend Docker image
        id: frontend  # ID 설정
        run: |
          cd frontend
          docker build -t itsmine-frontend .  # 프론트엔드 Docker 이미지 빌드
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          FRONTEND_IMAGE_TAG=${{ github.sha }}-$TIMESTAMP  # 이미지 태그 생성
          docker tag itsmine-frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-repository:$FRONTEND_IMAGE_TAG  # 태그 설정
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-repository:$FRONTEND_IMAGE_TAG  # 이미지 푸시
          echo "FRONTEND_IMAGE_TAG=${FRONTEND_IMAGE_TAG}"  # 프론트엔드 이미지 태그 출력
          echo "::set-output name=FRONTEND_IMAGE_TAG::$FRONTEND_IMAGE_TAG"  # 프론트엔드 이미지 태그 출력

      - name: Debug Output
        run: |
          echo "DEBUG: FRONTEND_IMAGE_TAG=${{ steps.frontend.outputs.FRONTEND_IMAGE_TAG }}"
          echo "DEBUG: BACKEND_IMAGE_TAG=${{ steps.backend.outputs.BACKEND_IMAGE_TAG }}"

      - name: SSH into EC2 and deploy Docker containers
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}  # SSH 호스트 설정
          username: ec2-user  # SSH 사용자 이름 설정
          key: ${{ secrets.SSH_KEY }}  # SSH 키 설정
          port: 22  # SSH 포트 설정
          script_stop: true
          script: |
            # 환경 변수 확인
            echo "DEBUG: FRONTEND_IMAGE_TAG=${{ steps.frontend.outputs.FRONTEND_IMAGE_TAG }}"
            echo "DEBUG: BACKEND_IMAGE_TAG=${{ steps.backend.outputs.BACKEND_IMAGE_TAG }}"
            
            # Amazon ECR에 로그인
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            
            # 최신 이미지를 풀링
            echo "Pulling backend image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-repository:${{ steps.backend.outputs.BACKEND_IMAGE_TAG }}"
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-repository:${{ steps.backend.outputs.BACKEND_IMAGE_TAG }}
            echo "Pulling frontend image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-repository:${{ steps.frontend.outputs.FRONTEND_IMAGE_TAG }}"
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-repository:${{ steps.frontend.outputs.FRONTEND_IMAGE_TAG }}
            
            # .env 파일 업데이트
            echo "FRONTEND_IMAGE_TAG=${{ steps.frontend.outputs.FRONTEND_IMAGE_TAG }}" >> /.env
            echo "BACKEND_IMAGE_TAG=${{ steps.backend.outputs.BACKEND_IMAGE_TAG }}" >> /.env

            # 기존 컨테이너 중지 및 제거
            docker-compose -f /docker-compose.yml down

            # 새로운 컨테이너 시작
            docker-compose --env-file /.env -f /docker-compose.yml up -d