name: Deploy Application

# 워크플로우 트리거 설정
on:
  workflow_dispatch:
  push:
    branches:
      - feature/backcicd
  pull_request:
    branches:
      - feature/backcicd
    types:
      - closed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and push backend Docker image
        run: |
          docker build -t itsmine-backend .
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BACKEND_IMAGE_TAG=${{ github.sha }}-$TIMESTAMP
          docker tag itsmine-backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-backend:$BACKEND_IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-backend:$BACKEND_IMAGE_TAG
          echo "::set-output name=BACKEND_IMAGE_TAG::$BACKEND_IMAGE_TAG"

      - name: Build and push frontend Docker image
        run: |
          cd frontend
          docker build -t itsmine-frontend .
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          FRONTEND_IMAGE_TAG=${{ github.sha }}-$TIMESTAMP
          docker tag itsmine-frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-frontend:$FRONTEND_IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-frontend:$FRONTEND_IMAGE_TAG
          echo "::set-output name=FRONTEND_IMAGE_TAG::$FRONTEND_IMAGE_TAG"

      - name: SSH into EC2 and deploy Docker containers
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-backend:${{ steps.deploy.outputs.BACKEND_IMAGE_TAG }}
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/itsmine-frontend:${{ steps.deploy.outputs.FRONTEND_IMAGE_TAG }}
            scp -o StrictHostKeyChecking=no -i ${{ secrets.SSH_KEY }} docker-compose.yml ec2-user@${{ secrets.SSH_HOST }}:/home/ec2-user/itsmine-backend/
            # Create .env file with secrets on EC2 instance
            echo "ACTIVEMQ_BROKER=${{ secrets.ACTIVEMQ_BROKER }}" >> .env
            echo "ACTIVEMQ_PASSWORD=${{ secrets.ACTIVEMQ_PASSWORD }}" >> .env
            echo "ACTIVEMQ_QNAME=${{ secrets.ACTIVEMQ_QNAME }}" >> .env
            echo "ACTIVEMQ_USER=${{ secrets.ACTIVEMQ_USER }}" >> .env
            echo "ADMIN_TOKEN=${{ secrets.ADMIN_TOKEN }}" >> .env
            echo "CLOUD_AWS_CREDENTIALS_ACCESSKEY=${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESSKEY }}" >> .env
            echo "CLOUD_AWS_CREDENTIALS_SECRETKEY=${{ secrets.CLOUD_AWS_CREDENTIALS_SECRETKEY }}" >> .env
            echo "CLOUD_AWS_DYNAMODB_ACCESSKEY=${{ secrets.CLOUD_AWS_DYNAMODB_ACCESSKEY }}" >> .env
            echo "CLOUD_AWS_DYNAMODB_SECRETKEY=${{ secrets.CLOUD_AWS_DYNAMODB_SECRETKEY }}" >> .env
            echo "CLOUD_AWS_REGION_STATIC=${{ secrets.CLOUD_AWS_REGION_STATIC }}" >> .env
            echo "CLOUD_AWS_S3_BUCKET=${{ secrets.CLOUD_AWS_S3_BUCKET }}" >> .env
            echo "CLOUD_AWS_S3_DOMAIN=${{ secrets.CLOUD_AWS_S3_DOMAIN }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_URL=${{ secrets.DB_URL }}" >> .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "JWT_KEY=${{ secrets.JWT_KEY }}" >> .env
            echo "RABBITMQ_BROKER=${{ secrets.RABBITMQ_BROKER }}" >> .env
            echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> .env
            echo "RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }}" >> .env
            echo "RABBITMQ_USERNAME=${{ secrets.RABBITMQ_USERNAME }}" >> .env
            echo "RABBITMQ_VIRTUAL_HOST=${{ secrets.RABBITMQ_VIRTUAL_HOST }}" >> .env
            echo "REDIS_DOMAIN=${{ secrets.REDIS_DOMAIN }}" >> .env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
            echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> .env
            echo "STOMP_HOST=${{ secrets.STOMP_HOST }}" >> .env
            scp -o StrictHostKeyChecking=no -i ${{ secrets.SSH_KEY }} .env ec2-user@${{ secrets.SSH_HOST }}:/home/ec2-user/itsmine-backend/
            docker-compose -f /home/ec2-user/itsmine-backend/docker-compose.yml down
            docker-compose -f /home/ec2-user/itsmine-backend/docker-compose.yml up -d